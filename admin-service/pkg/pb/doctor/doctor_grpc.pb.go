// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pkg/pb/doctor/doctor.proto

package doctor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Doctor_Checkdoctor_FullMethodName            = "/doctor.Doctor/Checkdoctor"
	Doctor_DoctorDetailforBooking_FullMethodName = "/doctor.Doctor/DoctorDetailforBooking"
)

// DoctorClient is the client API for Doctor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoctorClient interface {
	Checkdoctor(ctx context.Context, in *Doctorreq, opts ...grpc.CallOption) (*Doctorres, error)
	DoctorDetailforBooking(ctx context.Context, in *Doctorreq, opts ...grpc.CallOption) (*Bookingres, error)
}

type doctorClient struct {
	cc grpc.ClientConnInterface
}

func NewDoctorClient(cc grpc.ClientConnInterface) DoctorClient {
	return &doctorClient{cc}
}

func (c *doctorClient) Checkdoctor(ctx context.Context, in *Doctorreq, opts ...grpc.CallOption) (*Doctorres, error) {
	out := new(Doctorres)
	err := c.cc.Invoke(ctx, Doctor_Checkdoctor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorClient) DoctorDetailforBooking(ctx context.Context, in *Doctorreq, opts ...grpc.CallOption) (*Bookingres, error) {
	out := new(Bookingres)
	err := c.cc.Invoke(ctx, Doctor_DoctorDetailforBooking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorServer is the server API for Doctor service.
// All implementations must embed UnimplementedDoctorServer
// for forward compatibility
type DoctorServer interface {
	Checkdoctor(context.Context, *Doctorreq) (*Doctorres, error)
	DoctorDetailforBooking(context.Context, *Doctorreq) (*Bookingres, error)
	mustEmbedUnimplementedDoctorServer()
}

// UnimplementedDoctorServer must be embedded to have forward compatible implementations.
type UnimplementedDoctorServer struct {
}

func (UnimplementedDoctorServer) Checkdoctor(context.Context, *Doctorreq) (*Doctorres, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkdoctor not implemented")
}
func (UnimplementedDoctorServer) DoctorDetailforBooking(context.Context, *Doctorreq) (*Bookingres, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorDetailforBooking not implemented")
}
func (UnimplementedDoctorServer) mustEmbedUnimplementedDoctorServer() {}

// UnsafeDoctorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoctorServer will
// result in compilation errors.
type UnsafeDoctorServer interface {
	mustEmbedUnimplementedDoctorServer()
}

func RegisterDoctorServer(s grpc.ServiceRegistrar, srv DoctorServer) {
	s.RegisterService(&Doctor_ServiceDesc, srv)
}

func _Doctor_Checkdoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Doctorreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServer).Checkdoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doctor_Checkdoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServer).Checkdoctor(ctx, req.(*Doctorreq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doctor_DoctorDetailforBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Doctorreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServer).DoctorDetailforBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doctor_DoctorDetailforBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServer).DoctorDetailforBooking(ctx, req.(*Doctorreq))
	}
	return interceptor(ctx, in, info, handler)
}

// Doctor_ServiceDesc is the grpc.ServiceDesc for Doctor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Doctor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doctor.Doctor",
	HandlerType: (*DoctorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checkdoctor",
			Handler:    _Doctor_Checkdoctor_Handler,
		},
		{
			MethodName: "DoctorDetailforBooking",
			Handler:    _Doctor_DoctorDetailforBooking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/doctor/doctor.proto",
}
