// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pkg/pb/patient/patient.proto

package patient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Patient_IndPatientDetails_FullMethodName           = "/patient.Patient/IndPatientDetails"
	Patient_GetPatientGoogleDetailsByID_FullMethodName = "/patient.Patient/GetPatientGoogleDetailsByID"
	Patient_UpdatePatientGoogleToken_FullMethodName    = "/patient.Patient/UpdatePatientGoogleToken"
)

// PatientClient is the client API for Patient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatientClient interface {
	IndPatientDetails(ctx context.Context, in *Idreq, opts ...grpc.CallOption) (*PatientDetails, error)
	GetPatientGoogleDetailsByID(ctx context.Context, in *Idreq, opts ...grpc.CallOption) (*GooglePatientDetails, error)
	UpdatePatientGoogleToken(ctx context.Context, in *UpdateGoogleTokenReq, opts ...grpc.CallOption) (*UpdateGoogleTokenRes, error)
}

type patientClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientClient(cc grpc.ClientConnInterface) PatientClient {
	return &patientClient{cc}
}

func (c *patientClient) IndPatientDetails(ctx context.Context, in *Idreq, opts ...grpc.CallOption) (*PatientDetails, error) {
	out := new(PatientDetails)
	err := c.cc.Invoke(ctx, Patient_IndPatientDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientClient) GetPatientGoogleDetailsByID(ctx context.Context, in *Idreq, opts ...grpc.CallOption) (*GooglePatientDetails, error) {
	out := new(GooglePatientDetails)
	err := c.cc.Invoke(ctx, Patient_GetPatientGoogleDetailsByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientClient) UpdatePatientGoogleToken(ctx context.Context, in *UpdateGoogleTokenReq, opts ...grpc.CallOption) (*UpdateGoogleTokenRes, error) {
	out := new(UpdateGoogleTokenRes)
	err := c.cc.Invoke(ctx, Patient_UpdatePatientGoogleToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientServer is the server API for Patient service.
// All implementations must embed UnimplementedPatientServer
// for forward compatibility
type PatientServer interface {
	IndPatientDetails(context.Context, *Idreq) (*PatientDetails, error)
	GetPatientGoogleDetailsByID(context.Context, *Idreq) (*GooglePatientDetails, error)
	UpdatePatientGoogleToken(context.Context, *UpdateGoogleTokenReq) (*UpdateGoogleTokenRes, error)
	mustEmbedUnimplementedPatientServer()
}

// UnimplementedPatientServer must be embedded to have forward compatible implementations.
type UnimplementedPatientServer struct {
}

func (UnimplementedPatientServer) IndPatientDetails(context.Context, *Idreq) (*PatientDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndPatientDetails not implemented")
}
func (UnimplementedPatientServer) GetPatientGoogleDetailsByID(context.Context, *Idreq) (*GooglePatientDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientGoogleDetailsByID not implemented")
}
func (UnimplementedPatientServer) UpdatePatientGoogleToken(context.Context, *UpdateGoogleTokenReq) (*UpdateGoogleTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatientGoogleToken not implemented")
}
func (UnimplementedPatientServer) mustEmbedUnimplementedPatientServer() {}

// UnsafePatientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientServer will
// result in compilation errors.
type UnsafePatientServer interface {
	mustEmbedUnimplementedPatientServer()
}

func RegisterPatientServer(s grpc.ServiceRegistrar, srv PatientServer) {
	s.RegisterService(&Patient_ServiceDesc, srv)
}

func _Patient_IndPatientDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Idreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServer).IndPatientDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Patient_IndPatientDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServer).IndPatientDetails(ctx, req.(*Idreq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patient_GetPatientGoogleDetailsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Idreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServer).GetPatientGoogleDetailsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Patient_GetPatientGoogleDetailsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServer).GetPatientGoogleDetailsByID(ctx, req.(*Idreq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patient_UpdatePatientGoogleToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoogleTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServer).UpdatePatientGoogleToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Patient_UpdatePatientGoogleToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServer).UpdatePatientGoogleToken(ctx, req.(*UpdateGoogleTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Patient_ServiceDesc is the grpc.ServiceDesc for Patient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Patient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "patient.Patient",
	HandlerType: (*PatientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IndPatientDetails",
			Handler:    _Patient_IndPatientDetails_Handler,
		},
		{
			MethodName: "GetPatientGoogleDetailsByID",
			Handler:    _Patient_GetPatientGoogleDetailsByID_Handler,
		},
		{
			MethodName: "UpdatePatientGoogleToken",
			Handler:    _Patient_UpdatePatientGoogleToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/patient/patient.proto",
}
